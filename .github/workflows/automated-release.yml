name: 🚀 自動リリース

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  release:
    name: 🚀 リリース作成
    runs-on: ubuntu-24.04
    permissions:
      contents: write
      issues: write

    steps:
      - name: 📥 リポジトリのチェックアウト
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: 🔨 pnpmセットアップ
        uses: ./.github/actions/pnpm-setup

      - name: 📅 カレンダーバージョンタグ生成
        id: calendar-version
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const logger = {
              info: (msg) => console.log(`[INFO] 🔵 ${msg}`),
              warn: (msg) => console.warn(`[WARN] 🟡 ${msg}`),
              error: (msg) => console.error(`[ERROR] 🔴 ${msg}`),
              success: (msg) => console.log(`[SUCCESS] 🟢 ${msg}`)
            };

            // 今日の日付をYYYY.MM.DD形式で取得
            const today = new Date().toISOString().split('T')[0].replace(/-/g, '.');
            logger.info(`今日の日付: ${today}`);

            // 既存のタグ一覧を取得
            const existingTags = await github.paginate(github.rest.repos.listTags, {
              owner: context.repo.owner,
              repo: context.repo.repo
            }).catch(error => {
              logger.error(`タグ一覧の取得に失敗しました: ${error.message || error}`);
              throw error;
            });

            // 今日の日付で始まるタグを検索
            const todayTags = existingTags.filter(tag => tag.name.startsWith(today));
            logger.info(`今日のタグ数: ${todayTags.length}`);

            // 新しいタグ名を決定
            let newTag = today;
            if (todayTags.length > 0) {
              // 同日に複数のリリースがある場合、カウントを追加
              const maxCount = Math.max(...todayTags.map(tag => {
                const parts = tag.name.split('-');
                return parts.length > 1 ? parseInt(parts[1]) || 0 : 0;
              }));
              newTag = `${today}-${maxCount + 1}`;
            }

            logger.success(`新しいカレンダーバージョンタグ: ${newTag}`);
            core.setOutput('tag', newTag);
            return newTag;

      - name: 🔍 Next.jsバージョン変更チェック
        id: nextjs-version
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const logger = {
              info: (msg) => console.log(`[INFO] 🔵 ${msg}`),
              warn: (msg) => console.warn(`[WARN] 🟡 ${msg}`),
              error: (msg) => console.error(`[ERROR] 🔴 ${msg}`),
              success: (msg) => console.log(`[SUCCESS] 🟢 ${msg}`)
            };

            const fs = require('fs');
            const { execSync } = require('child_process');

            try {
              // 現在のpackage.jsonからNext.jsバージョンを取得
              const currentPackageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
              const currentNextjsVersion = currentPackageJson.dependencies.next;
              const currentMajor = parseInt(currentNextjsVersion.split('.')[0]);
              
              logger.info(`現在のNext.jsバージョン: ${currentNextjsVersion} (メジャー: ${currentMajor})`);

              // 前回コミットのpackage.jsonからNext.jsバージョンを取得
              let previousNextjsVersion = null;
              let previousMajor = null;
              
              try {
                const previousPackageJsonContent = execSync('git show HEAD~1:package.json', { encoding: 'utf8' });
                const previousPackageJson = JSON.parse(previousPackageJsonContent);
                previousNextjsVersion = previousPackageJson.dependencies.next;
                previousMajor = parseInt(previousNextjsVersion.split('.')[0]);
                
                logger.info(`前回のNext.jsバージョン: ${previousNextjsVersion} (メジャー: ${previousMajor})`);
              } catch (error) {
                logger.warn(`前回のpackage.jsonが取得できませんでした: ${error.message}`);
                // 初回コミットの場合は前回バージョンなしとして処理
              }

              // メジャーバージョンが変更されたかチェック
              const shouldCreateNextjsTag = previousMajor !== null && currentMajor !== previousMajor;
              const nextjsTag = `nextjs-${currentMajor}`;

              if (shouldCreateNextjsTag) {
                logger.success(`Next.jsメジャーバージョンが変更されました: ${previousMajor} → ${currentMajor}`);
                logger.success(`Next.jsバージョンタグを作成します: ${nextjsTag}`);
              } else {
                logger.info('Next.jsメジャーバージョンに変更はありません');
              }

              core.setOutput('should_create_tag', shouldCreateNextjsTag);
              core.setOutput('tag', nextjsTag);
              core.setOutput('current_version', currentNextjsVersion);
              core.setOutput('previous_version', previousNextjsVersion || 'なし');

              return {
                shouldCreateTag: shouldCreateNextjsTag,
                tag: nextjsTag,
                currentVersion: currentNextjsVersion,
                previousVersion: previousNextjsVersion
              };
            } catch (error) {
              logger.error(`Next.jsバージョンチェック中にエラーが発生しました: ${error.message}`);
              throw error;
            }

      - name: 🏷️ カレンダーバージョンタグ作成
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const logger = {
              info: (msg) => console.log(`[INFO] 🔵 ${msg}`),
              success: (msg) => console.log(`[SUCCESS] 🟢 ${msg}`)
            };

            const tagName = '${{ steps.calendar-version.outputs.tag }}';
            
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            });

            logger.success(`カレンダーバージョンタグを作成しました: ${tagName}`);

      - name: 🏷️ Next.jsバージョンタグ作成
        if: steps.nextjs-version.outputs.should_create_tag == 'true'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const logger = {
              info: (msg) => console.log(`[INFO] 🔵 ${msg}`),
              success: (msg) => console.log(`[SUCCESS] 🟢 ${msg}`)
            };

            const tagName = '${{ steps.nextjs-version.outputs.tag }}';
            
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${tagName}`,
                sha: context.sha
              });
              logger.success(`Next.jsバージョンタグを作成しました: ${tagName}`);
            } catch (error) {
              if (error.status === 422) {
                logger.info(`タグ ${tagName} は既に存在します。コミットを更新します。`);
                await github.rest.git.updateRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${tagName}`,
                  sha: context.sha
                });
                logger.success(`Next.jsバージョンタグを更新しました: ${tagName}`);
              } else {
                throw error;
              }
            }

      - name: 📝 リリースノート生成・公開
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          script: |
            const logger = {
              info: (msg) => console.log(`[INFO] 🔵 ${msg}`),
              success: (msg) => console.log(`[SUCCESS] 🟢 ${msg}`)
            };

            const calendarTag = '${{ steps.calendar-version.outputs.tag }}';
            const nextjsVersionInfo = JSON.parse('${{ steps.nextjs-version.outputs.result }}');
            
            // リリースノートの本文を作成
            let releaseBody = '';

            if (nextjsVersionInfo.shouldCreateTag) {
              releaseBody += `## 🎉 Next.jsメジャーバージョンアップデート\n\n`;
              releaseBody += `Next.jsのメジャーバージョンが更新されました:\n`;
              releaseBody += `- **前回**: \`${nextjsVersionInfo.previousVersion}\`\n`;
              releaseBody += `- **今回**: \`${nextjsVersionInfo.currentVersion}\`\n`;
              releaseBody += `- **バージョンタグ**: \`${nextjsVersionInfo.tag}\`\n\n`;
            }

            // GitHubの自動生成リリースノートを使用してリリースを作成
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: calendarTag,
              name: `Release ${calendarTag}`,
              body: releaseBody,
              generate_release_notes: true,
              draft: false,
              prerelease: false
            });

            logger.success(`リリースを作成しました: ${release.data.html_url}`);
            
            return {
              releaseUrl: release.data.html_url,
              releaseId: release.data.id
            };
