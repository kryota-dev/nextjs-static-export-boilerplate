name: Deploy to FTP Server
description: Common actions to deploy to an FTP server

inputs:
  artifact-name:
    description: 'The name of the artifact to deploy'
    required: true
  base-path:
    description: 'The base path of the artifact'
    required: false
  ftp-server:
    description: 'The address of the FTP server'
    required: true
  ftp-username:
    description: 'The username of the FTP server'
    required: true
  ftp-password:
    description: 'The password of the FTP server'
    required: true
  ftp-path:
    description: 'The path of the FTP server'
    required: true
  dry-run:
    description: 'Whether to run in dry-run mode (default: false)'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: ‚¨áÔ∏è Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ./out

    - name: ‚è¨ Install lftp
      shell: bash
      run: |
        which lftp || sudo apt update && sudo apt install -y lftp
    - name: üöÄ Deploy to FTP Server
      shell: bash
      env:
        FTP_SERVER: ${{ inputs.ftp-server }}
        FTP_USERNAME: ${{ inputs.ftp-username }}
        FTP_PASSWORD: ${{ inputs.ftp-password }}
        FTP_PATH: ${{ inputs.ftp-path }}
        BASE_PATH: ${{ inputs.base-path }}
        DRY_RUN: ${{ inputs.dry-run }}
        DEBUG: ${{ runner.debug }}
      run: |
        TARGET_PATH="${FTP_PATH}"
        SOURCE_PATH="./out${BASE_PATH}"

        if [ "$DRY_RUN" = "true" ]; then
          echo "[INFO] üîç DRY RUN MODE: Checking deployment target"
          echo "[INFO] üìÅ Source: ${SOURCE_PATH}"
          echo "[INFO] üìÇ Target: ${TARGET_PATH}"
          echo "[INFO] üåê Server: ${FTP_SERVER}"
          
          # Check source directory
          if [ -d "$SOURCE_PATH" ]; then
            echo "[INFO] ‚úÖ Source directory found"
            echo "[INFO] üìã Files to deploy:"
            find "$SOURCE_PATH" -type f | sed -n '1,10{s|^|  - |;p}'
            [ $(find "$SOURCE_PATH" -type f | wc -l) -gt 10 ] && echo "  ... and more"
          else
            echo "[WARNING] ‚ö†Ô∏è Source directory not found: ${SOURCE_PATH}"
          fi
          
          # Check FTP connection
          echo "[INFO] üîå Testing FTP connection..."
          if lftp -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e"\
          set ftp:ssl-allow no; \
          set net:timeout 30; \
          ls -la ${TARGET_PATH}; \
          exit"; then
            echo "[INFO] ‚úÖ FTP connection successful"
          else
            echo "[WARNING] ‚ö†Ô∏è FTP connection failed or target directory inaccessible"
          fi
          
          echo "[INFO] üí° Would deploy from: ${SOURCE_PATH}"
          echo "[INFO] üí° Would deploy to: ${TARGET_PATH}"
          echo "[INFO] üí° To actually deploy, set dry-run to 'false'"
        else
          echo "[INFO] üöÄ Deploying to FTP Server"
          echo "[INFO] üìÅ Source: ${SOURCE_PATH}"
          echo "[INFO] üìÇ Target: ${TARGET_PATH}"
          
          # Note: SSL disabled due to server configuration compatibility
          # Consider upgrading to FTPS if server supports it
          if lftp${{ env.DEBUG == '1' && ' -d' || '' }} -u "$FTP_USERNAME","$FTP_PASSWORD" "$FTP_SERVER" -e"\
          set ftp:ssl-allow no; \
          set net:timeout 30; \
          mirror \
          --reverse \
          --delete \
          -x \".htaccess\" \
          ${SOURCE_PATH} ${TARGET_PATH}; \
          exit"; then
            echo "[SUCCESS] ‚úÖ Deployment completed successfully"
          else
            echo "[ERROR] ‚ùå FTP deployment failed"
            exit 1
          fi
        fi
