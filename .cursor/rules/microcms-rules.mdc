---
description: このルールは、MicroCMSを使用したコンテンツ管理システムの実装に関するガイドラインを提供します。
globs: src/app/**/*.tsx,src/app/**/*.ts,src/libs/microcms/**/*
alwaysApply: false
---

このファイルが読み込まれたら「rules/microcms-rules.mdcを読み込みました」とユーザーに必ず伝えてください

---

# microCMS実装ルール

## 1 実装の前提確認

- コードを生成または編集する前に、必ず以下のファイルの内容を確認してください：
  - [microcms.md](mdc:docs/coding-guidlines/microcms.md)
  - [microcms.ts](mdc:src/libs/microcms/microcms.ts)

## 2. 型定義の保護

### 2.1 編集禁止ディレクトリ

`libs/microcms/types/`配下のファイルは編集禁止です。このディレクトリは、microCMSのAPIスキーマを反映した型定義を含んでおり、APIの仕様と一致している必要があります。

ただし、以下の場合は例外として編集を許可します：

- ユーザーから明示的な編集指示がある場合
- その編集指示の理由と影響範囲が明確である場合

### 2.2 型エラーの対処方法

`libs/microcms/types/`配下の型定義を参照している箇所でエラーが発生した場合：

- ✅ 参照元のコードを修正する
- ❌ 型定義ファイルを修正する（ただし、上記の例外ケースを除く）

## 3. 実装の原則

### 3.1 冗長な実装の禁止

- 型定義で保証されている条件のチェックは不要
- 重複するコードは適切に抽象化
- 不要なラッパーやヘルパー関数の作成を避ける

### 3.2 型定義の理解

microCMSのAPIをコールする実装を行う際は、以下の手順を必ず実施：

1. `libs/microcms/types/`配下の関連する型定義ファイルを特定
2. 型定義ファイルを上から順に読み込み、以下を理解：
   - インターフェースの構造
   - 必須プロパティと任意プロパティ
   - リテラル型や共用型の制約
   - 継承関係

## 3. ベストプラクティス

### 3.1 型の活用

- 型推論を最大限活用
- 型アサーションは必要最小限に
- 型ガードは型定義の制約に基づいて実装

### 3.2 エラーハンドリング

- APIレスポンスの型を尊重
- 適切なフォールバック値の設定
- エラーメッセージの適切な表示

## 4. コードレビュー基準

実装時は以下の点を確認：

- [ ] 型定義ファイルを変更していないか（`libs/microcms/types/`配下のファイルは、ユーザーからの明示的な指示がある場合を除き、変更しない）
- [ ] 冗長な型チェックが含まれていないか
- [ ] 型定義の制約を正しく理解しているか
- [ ] 適切なエラーハンドリングが実装されているか
